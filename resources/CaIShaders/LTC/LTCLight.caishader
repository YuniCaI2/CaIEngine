Settings {
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest LessOrEqual
    ZWrite On
}

Vertex {
    Input{
        0 vec3 inPos
        1 vec3 inNormal
        2 vec3 inTangent
        3 vec2 inTexCoord
    }
    Output{
        2 vec2 outTexCoord
        4 flat float intensity
    }
    Properties {
        mat4 viewMatrix
        mat4 projectionMatrix
        mat4 lightMatrix
        vec3 lightPosition
        vec3 lightNormal
        float lightHeight
        float lightWidth
        float lightIntensity
        vec3 lightColor
        mat4 modelMatrix
    }
    Program{
        void main()
        {
            vec4 worldPos = lightMatrix * vec4(inPos, 1.0);
            gl_Position = projectionMatrix * viewMatrix * worldPos;
            intensity = lightIntensity;
            outTexCoord = inTexCoord;
        }
    }
}

Fragment{
    Input{
        2 vec2 inTexCoord
        4 flat float intensity
    }
    Output{
        0 vec4 outColor
    }
    Properties {
        sampler2D colorSampler
    }
    Program{
        vec3 ACEStonemap(vec3 hdr) {
            float a = 2.51;
            float b = 0.03;
            float c = 2.43;
            float d = 0.59;
            float e = 0.14;
            return clamp((hdr * (a * hdr + b)) / (hdr * (c * hdr + d) + e), 0.0, 1.0);
        }

        void main()
        {
            outColor = vec4(ACEStonemap(vec3(texture(colorSampler, inTexCoord)) * intensity), 1.0);
        }
    }
}