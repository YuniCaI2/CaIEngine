Settings {
    Blend SrcAlpha OneMinusSrcAlpha
    BlendOp Add
    Cull Back
    ZTest LessOrEqual
    ZWrite On
    MSAA On
}

Vertex {
    Input{
        0 vec3 inPos
        1 vec3 inNormal
        2 vec3 inTangent
        3 vec2 inTexCoord
    }
    Output{
        0 vec3 outWorldPos
        1 vec3 outWorldNormal
        2 vec2 outTexCoord
        3 mat3 outTBN
    }
    Properties {
        mat4 viewMatrix
        mat4 projectionMatrix
        mat4 modelMatrix
    }
    Program{
        void main()
        {
            vec4 worldPos = modelMatrix * vec4(inPos, 1.0);
            outWorldPos = worldPos.xyz;

            gl_Position = projectionMatrix * viewMatrix * worldPos;

            outWorldNormal = normalize(transpose(inverse(mat3(modelMatrix))) * inNormal);
            vec3 worldTangent = normalize(mat3(modelMatrix) * inTangent);

            vec3 worldBitangent = cross(outWorldNormal, worldTangent);
            outTBN = mat3(worldTangent, worldBitangent, outWorldNormal);

            outTexCoord = inTexCoord;
        }
    }
}

Fragment{
    Input{
        0 vec3 inWorldPos
        1 vec3 inWorldNormal
        2 vec2 inTexCoord
        3 mat3 inTBN
    }
    Output{
        0 vec4 outColor
    }
    Properties {
        sampler2D colorSampler
    }
    Program{
        void main()
        {
            vec4 colors =  texture(colorSampler, inTexCoord) * 1.0;
            outColor = vec4(colors.r, colors.g , colors.b, 1.0);
        }
    }
}