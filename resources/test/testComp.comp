#version 450 core

layout (binding = 0) uniform UniformBufferObject {
    float scales;
} _UBO;



    struct Particle {
        vec2 position;
        vec2 velocity;
        vec4 color;
    };

layout(std430, binding = 1) readonly buffer Particle_SSBO_READONLY {
    Particle particlesIn[];
};

layout(std430, binding = 2) writeonly buffer Particle_SSBO_WRITEONLY {
    Particle particlesOut[];
};

layout(binding = 3, rgba8) uniform readonly image2D image1;

layout(binding = 4, rgba8) uniform writeonly image2D image2;


layout (local_size_x = 256, local_size_y = 1, local_size_z = 1 ) in;

    void main(){
        uint index = gl_GlobalInvocationID.x;
        particlesOut[index].position = particlesIn[index].position + particlesIn[index].velocity * _UBO.scales;
        particlesOut[index].velocity = particlesIn[index].velocity;
        particlesOut[index].color    = particlesIn[index].color;
    }
